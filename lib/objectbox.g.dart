// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/problem_session.dart';
import 'models/rank.dart';
import 'models/rating_log.dart';
import 'models/study_session.dart';
import 'models/subject.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 366825482473197346),
    name: 'ProblemSession',
    lastPropertyId: const obx_int.IdUid(6, 2261123445691697927),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 4735691665954168556),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 6710728561017930202),
        name: 'when',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 3269107163824465070),
        name: 'problemsAttempted',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 4431071603957482579),
        name: 'problemsCorrect',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 7763776198837779075),
        name: 'durationSeconds',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 2261123445691697927),
        name: 'applied',
        type: 1,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 7094780164835745055),
    name: 'Rank',
    lastPropertyId: const obx_int.IdUid(6, 1667718374968852744),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 3239770133951192813),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 272578517288451752),
        name: 'requiredRating',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 7293219903194428499),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 4010249560439960871),
        name: 'description',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 20030224557216871),
        name: 'color',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 1667718374968852744),
        name: 'glow',
        type: 1,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(3, 4567488810618649915),
    name: 'RatingLog',
    lastPropertyId: const obx_int.IdUid(3, 6132561407344725141),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 5969807981884091256),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 5089446410036113493),
        name: 'when',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 6132561407344725141),
        name: 'rating',
        type: 6,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(4, 8345632103666706116),
    name: 'StudySession',
    lastPropertyId: const obx_int.IdUid(4, 1104375139533381613),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 2917271487245072123),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 2893982099169393584),
        name: 'when',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 3484483473479774833),
        name: 'units',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 1104375139533381613),
        name: 'applied',
        type: 1,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(5, 8905902313295055085),
    name: 'Subject',
    lastPropertyId: const obx_int.IdUid(23, 1266431586907194696),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 1641788822954693886),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 7367391195579831963),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 4995597120482307639),
        name: 'description',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 5358957923620643222),
        name: 'baseRating',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 2905030494009256739),
        name: 'maxRating',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 125237889065161106),
        name: 'studyEnabled',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 8608689291578866089),
        name: 'problemEnabled',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 6539711577988690747),
        name: 'unitName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 4547897871064208977),
        name: 'studyFrequency',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 9019557869852769136),
        name: 'studyGoalMin',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 389280064125562351),
        name: 'studyGoalMax',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(12, 1391290167251000580),
        name: 'studyStreak',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(13, 9147452912585933975),
        name: 'studyRating',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(14, 6656332178807277140),
        name: 'lastProcessedStudy',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(15, 7736487060319348783),
        name: 'studyRatingConstant',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(16, 3346237924023271205),
        name: 'problemFrequency',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(17, 3431112641188439336),
        name: 'problemGoalMin',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(18, 2832726576951033153),
        name: 'problemGoalMax',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(19, 7664820229115763599),
        name: 'problemStreak',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(20, 7101562800989189418),
        name: 'problemTimeGoal',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(21, 3757106475897802813),
        name: 'problemRating',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(22, 981701768054789967),
        name: 'lastProcessedProblems',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(23, 1266431586907194696),
        name: 'problemRatingConstant',
        type: 8,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[
      obx_int.ModelRelation(
        id: const obx_int.IdUid(1, 543803747439561709),
        name: 'ranks',
        targetId: const obx_int.IdUid(2, 7094780164835745055),
      ),
      obx_int.ModelRelation(
        id: const obx_int.IdUid(2, 2316260334328942325),
        name: 'studySessions',
        targetId: const obx_int.IdUid(4, 8345632103666706116),
      ),
      obx_int.ModelRelation(
        id: const obx_int.IdUid(3, 6885515309030317027),
        name: 'problemSessions',
        targetId: const obx_int.IdUid(1, 366825482473197346),
      ),
      obx_int.ModelRelation(
        id: const obx_int.IdUid(4, 233696712762759455),
        name: 'studyRatingHistory',
        targetId: const obx_int.IdUid(3, 4567488810618649915),
      ),
      obx_int.ModelRelation(
        id: const obx_int.IdUid(5, 5784388862592702465),
        name: 'problemRatingHistory',
        targetId: const obx_int.IdUid(3, 4567488810618649915),
      ),
    ],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(5, 8905902313295055085),
    lastIndexId: const obx_int.IdUid(0, 0),
    lastRelationId: const obx_int.IdUid(5, 5784388862592702465),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [],
    retiredPropertyUids: const [],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    ProblemSession: obx_int.EntityDefinition<ProblemSession>(
      model: _entities[0],
      toOneRelations: (ProblemSession object) => [],
      toManyRelations: (ProblemSession object) => {},
      getId: (ProblemSession object) => object.id,
      setId: (ProblemSession object, int id) {
        object.id = id;
      },
      objectToFB: (ProblemSession object, fb.Builder fbb) {
        fbb.startTable(7);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.when.millisecondsSinceEpoch);
        fbb.addInt64(2, object.problemsAttempted);
        fbb.addInt64(3, object.problemsCorrect);
        fbb.addInt64(4, object.durationSeconds);
        fbb.addBool(5, object.applied);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);

        final object = ProblemSession()
          ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
          ..when = DateTime.fromMillisecondsSinceEpoch(
            const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
          )
          ..problemsAttempted = const fb.Int64Reader().vTableGet(
            buffer,
            rootOffset,
            8,
            0,
          )
          ..problemsCorrect = const fb.Int64Reader().vTableGet(
            buffer,
            rootOffset,
            10,
            0,
          )
          ..durationSeconds = const fb.Int64Reader().vTableGet(
            buffer,
            rootOffset,
            12,
            0,
          )
          ..applied = const fb.BoolReader().vTableGet(
            buffer,
            rootOffset,
            14,
            false,
          );

        return object;
      },
    ),
    Rank: obx_int.EntityDefinition<Rank>(
      model: _entities[1],
      toOneRelations: (Rank object) => [],
      toManyRelations: (Rank object) => {},
      getId: (Rank object) => object.id,
      setId: (Rank object, int id) {
        object.id = id;
      },
      objectToFB: (Rank object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final descriptionOffset = fbb.writeString(object.description);
        final colorOffset = fbb.writeString(object.color);
        fbb.startTable(7);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.requiredRating);
        fbb.addOffset(2, nameOffset);
        fbb.addOffset(3, descriptionOffset);
        fbb.addOffset(4, colorOffset);
        fbb.addBool(5, object.glow);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);

        final object = Rank()
          ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
          ..requiredRating = const fb.Int64Reader().vTableGet(
            buffer,
            rootOffset,
            6,
            0,
          )
          ..name = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 8, '')
          ..description = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 10, '')
          ..color = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 12, '')
          ..glow = const fb.BoolReader().vTableGet(
            buffer,
            rootOffset,
            14,
            false,
          );

        return object;
      },
    ),
    RatingLog: obx_int.EntityDefinition<RatingLog>(
      model: _entities[2],
      toOneRelations: (RatingLog object) => [],
      toManyRelations: (RatingLog object) => {},
      getId: (RatingLog object) => object.id,
      setId: (RatingLog object, int id) {
        object.id = id;
      },
      objectToFB: (RatingLog object, fb.Builder fbb) {
        fbb.startTable(4);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.when.millisecondsSinceEpoch);
        fbb.addInt64(2, object.rating);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);

        final object = RatingLog()
          ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
          ..when = DateTime.fromMillisecondsSinceEpoch(
            const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
          )
          ..rating = const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);

        return object;
      },
    ),
    StudySession: obx_int.EntityDefinition<StudySession>(
      model: _entities[3],
      toOneRelations: (StudySession object) => [],
      toManyRelations: (StudySession object) => {},
      getId: (StudySession object) => object.id,
      setId: (StudySession object, int id) {
        object.id = id;
      },
      objectToFB: (StudySession object, fb.Builder fbb) {
        fbb.startTable(5);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.when.millisecondsSinceEpoch);
        fbb.addFloat64(2, object.units);
        fbb.addBool(3, object.applied);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);

        final object = StudySession()
          ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
          ..when = DateTime.fromMillisecondsSinceEpoch(
            const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
          )
          ..units = const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0)
          ..applied = const fb.BoolReader().vTableGet(
            buffer,
            rootOffset,
            10,
            false,
          );

        return object;
      },
    ),
    Subject: obx_int.EntityDefinition<Subject>(
      model: _entities[4],
      toOneRelations: (Subject object) => [],
      toManyRelations: (Subject object) => {
        obx_int.RelInfo<Subject>.toMany(1, object.id): object.ranks,
        obx_int.RelInfo<Subject>.toMany(2, object.id): object.studySessions,
        obx_int.RelInfo<Subject>.toMany(3, object.id): object.problemSessions,
        obx_int.RelInfo<Subject>.toMany(4, object.id):
            object.studyRatingHistory,
        obx_int.RelInfo<Subject>.toMany(5, object.id):
            object.problemRatingHistory,
      },
      getId: (Subject object) => object.id,
      setId: (Subject object, int id) {
        object.id = id;
      },
      objectToFB: (Subject object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final descriptionOffset = fbb.writeString(object.description);
        final unitNameOffset = fbb.writeString(object.unitName);
        fbb.startTable(24);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addOffset(2, descriptionOffset);
        fbb.addInt64(3, object.baseRating);
        fbb.addInt64(4, object.maxRating);
        fbb.addBool(5, object.studyEnabled);
        fbb.addBool(6, object.problemEnabled);
        fbb.addOffset(7, unitNameOffset);
        fbb.addInt64(8, object.studyFrequency);
        fbb.addInt64(9, object.studyGoalMin);
        fbb.addInt64(10, object.studyGoalMax);
        fbb.addInt64(11, object.studyStreak);
        fbb.addInt64(12, object.studyRating);
        fbb.addInt64(13, object.lastProcessedStudy?.millisecondsSinceEpoch);
        fbb.addFloat64(14, object.studyRatingConstant);
        fbb.addInt64(15, object.problemFrequency);
        fbb.addInt64(16, object.problemGoalMin);
        fbb.addInt64(17, object.problemGoalMax);
        fbb.addInt64(18, object.problemStreak);
        fbb.addInt64(19, object.problemTimeGoal);
        fbb.addInt64(20, object.problemRating);
        fbb.addInt64(21, object.lastProcessedProblems?.millisecondsSinceEpoch);
        fbb.addFloat64(22, object.problemRatingConstant);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final lastProcessedStudyValue = const fb.Int64Reader()
            .vTableGetNullable(buffer, rootOffset, 30);
        final lastProcessedProblemsValue = const fb.Int64Reader()
            .vTableGetNullable(buffer, rootOffset, 46);
        final object = Subject()
          ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
          ..name = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 6, '')
          ..description = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 8, '')
          ..baseRating = const fb.Int64Reader().vTableGet(
            buffer,
            rootOffset,
            10,
            0,
          )
          ..maxRating = const fb.Int64Reader().vTableGet(
            buffer,
            rootOffset,
            12,
            0,
          )
          ..studyEnabled = const fb.BoolReader().vTableGet(
            buffer,
            rootOffset,
            14,
            false,
          )
          ..problemEnabled = const fb.BoolReader().vTableGet(
            buffer,
            rootOffset,
            16,
            false,
          )
          ..unitName = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 18, '')
          ..studyFrequency = const fb.Int64Reader().vTableGet(
            buffer,
            rootOffset,
            20,
            0,
          )
          ..studyGoalMin = const fb.Int64Reader().vTableGet(
            buffer,
            rootOffset,
            22,
            0,
          )
          ..studyGoalMax = const fb.Int64Reader().vTableGet(
            buffer,
            rootOffset,
            24,
            0,
          )
          ..studyStreak = const fb.Int64Reader().vTableGet(
            buffer,
            rootOffset,
            26,
            0,
          )
          ..studyRating = const fb.Int64Reader().vTableGet(
            buffer,
            rootOffset,
            28,
            0,
          )
          ..lastProcessedStudy = lastProcessedStudyValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(lastProcessedStudyValue)
          ..studyRatingConstant = const fb.Float64Reader().vTableGet(
            buffer,
            rootOffset,
            32,
            0,
          )
          ..problemFrequency = const fb.Int64Reader().vTableGet(
            buffer,
            rootOffset,
            34,
            0,
          )
          ..problemGoalMin = const fb.Int64Reader().vTableGet(
            buffer,
            rootOffset,
            36,
            0,
          )
          ..problemGoalMax = const fb.Int64Reader().vTableGet(
            buffer,
            rootOffset,
            38,
            0,
          )
          ..problemStreak = const fb.Int64Reader().vTableGet(
            buffer,
            rootOffset,
            40,
            0,
          )
          ..problemTimeGoal = const fb.Int64Reader().vTableGet(
            buffer,
            rootOffset,
            42,
            0,
          )
          ..problemRating = const fb.Int64Reader().vTableGet(
            buffer,
            rootOffset,
            44,
            0,
          )
          ..lastProcessedProblems = lastProcessedProblemsValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(lastProcessedProblemsValue)
          ..problemRatingConstant = const fb.Float64Reader().vTableGet(
            buffer,
            rootOffset,
            48,
            0,
          );
        obx_int.InternalToManyAccess.setRelInfo<Subject>(
          object.ranks,
          store,
          obx_int.RelInfo<Subject>.toMany(1, object.id),
        );
        obx_int.InternalToManyAccess.setRelInfo<Subject>(
          object.studySessions,
          store,
          obx_int.RelInfo<Subject>.toMany(2, object.id),
        );
        obx_int.InternalToManyAccess.setRelInfo<Subject>(
          object.problemSessions,
          store,
          obx_int.RelInfo<Subject>.toMany(3, object.id),
        );
        obx_int.InternalToManyAccess.setRelInfo<Subject>(
          object.studyRatingHistory,
          store,
          obx_int.RelInfo<Subject>.toMany(4, object.id),
        );
        obx_int.InternalToManyAccess.setRelInfo<Subject>(
          object.problemRatingHistory,
          store,
          obx_int.RelInfo<Subject>.toMany(5, object.id),
        );
        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [ProblemSession] entity fields to define ObjectBox queries.
class ProblemSession_ {
  /// See [ProblemSession.id].
  static final id = obx.QueryIntegerProperty<ProblemSession>(
    _entities[0].properties[0],
  );

  /// See [ProblemSession.when].
  static final when = obx.QueryDateProperty<ProblemSession>(
    _entities[0].properties[1],
  );

  /// See [ProblemSession.problemsAttempted].
  static final problemsAttempted = obx.QueryIntegerProperty<ProblemSession>(
    _entities[0].properties[2],
  );

  /// See [ProblemSession.problemsCorrect].
  static final problemsCorrect = obx.QueryIntegerProperty<ProblemSession>(
    _entities[0].properties[3],
  );

  /// See [ProblemSession.durationSeconds].
  static final durationSeconds = obx.QueryIntegerProperty<ProblemSession>(
    _entities[0].properties[4],
  );

  /// See [ProblemSession.applied].
  static final applied = obx.QueryBooleanProperty<ProblemSession>(
    _entities[0].properties[5],
  );
}

/// [Rank] entity fields to define ObjectBox queries.
class Rank_ {
  /// See [Rank.id].
  static final id = obx.QueryIntegerProperty<Rank>(_entities[1].properties[0]);

  /// See [Rank.requiredRating].
  static final requiredRating = obx.QueryIntegerProperty<Rank>(
    _entities[1].properties[1],
  );

  /// See [Rank.name].
  static final name = obx.QueryStringProperty<Rank>(_entities[1].properties[2]);

  /// See [Rank.description].
  static final description = obx.QueryStringProperty<Rank>(
    _entities[1].properties[3],
  );

  /// See [Rank.color].
  static final color = obx.QueryStringProperty<Rank>(
    _entities[1].properties[4],
  );

  /// See [Rank.glow].
  static final glow = obx.QueryBooleanProperty<Rank>(
    _entities[1].properties[5],
  );
}

/// [RatingLog] entity fields to define ObjectBox queries.
class RatingLog_ {
  /// See [RatingLog.id].
  static final id = obx.QueryIntegerProperty<RatingLog>(
    _entities[2].properties[0],
  );

  /// See [RatingLog.when].
  static final when = obx.QueryDateProperty<RatingLog>(
    _entities[2].properties[1],
  );

  /// See [RatingLog.rating].
  static final rating = obx.QueryIntegerProperty<RatingLog>(
    _entities[2].properties[2],
  );
}

/// [StudySession] entity fields to define ObjectBox queries.
class StudySession_ {
  /// See [StudySession.id].
  static final id = obx.QueryIntegerProperty<StudySession>(
    _entities[3].properties[0],
  );

  /// See [StudySession.when].
  static final when = obx.QueryDateProperty<StudySession>(
    _entities[3].properties[1],
  );

  /// See [StudySession.units].
  static final units = obx.QueryDoubleProperty<StudySession>(
    _entities[3].properties[2],
  );

  /// See [StudySession.applied].
  static final applied = obx.QueryBooleanProperty<StudySession>(
    _entities[3].properties[3],
  );
}

/// [Subject] entity fields to define ObjectBox queries.
class Subject_ {
  /// See [Subject.id].
  static final id = obx.QueryIntegerProperty<Subject>(
    _entities[4].properties[0],
  );

  /// See [Subject.name].
  static final name = obx.QueryStringProperty<Subject>(
    _entities[4].properties[1],
  );

  /// See [Subject.description].
  static final description = obx.QueryStringProperty<Subject>(
    _entities[4].properties[2],
  );

  /// See [Subject.baseRating].
  static final baseRating = obx.QueryIntegerProperty<Subject>(
    _entities[4].properties[3],
  );

  /// See [Subject.maxRating].
  static final maxRating = obx.QueryIntegerProperty<Subject>(
    _entities[4].properties[4],
  );

  /// See [Subject.studyEnabled].
  static final studyEnabled = obx.QueryBooleanProperty<Subject>(
    _entities[4].properties[5],
  );

  /// See [Subject.problemEnabled].
  static final problemEnabled = obx.QueryBooleanProperty<Subject>(
    _entities[4].properties[6],
  );

  /// See [Subject.unitName].
  static final unitName = obx.QueryStringProperty<Subject>(
    _entities[4].properties[7],
  );

  /// See [Subject.studyFrequency].
  static final studyFrequency = obx.QueryIntegerProperty<Subject>(
    _entities[4].properties[8],
  );

  /// See [Subject.studyGoalMin].
  static final studyGoalMin = obx.QueryIntegerProperty<Subject>(
    _entities[4].properties[9],
  );

  /// See [Subject.studyGoalMax].
  static final studyGoalMax = obx.QueryIntegerProperty<Subject>(
    _entities[4].properties[10],
  );

  /// See [Subject.studyStreak].
  static final studyStreak = obx.QueryIntegerProperty<Subject>(
    _entities[4].properties[11],
  );

  /// See [Subject.studyRating].
  static final studyRating = obx.QueryIntegerProperty<Subject>(
    _entities[4].properties[12],
  );

  /// See [Subject.lastProcessedStudy].
  static final lastProcessedStudy = obx.QueryDateProperty<Subject>(
    _entities[4].properties[13],
  );

  /// See [Subject.studyRatingConstant].
  static final studyRatingConstant = obx.QueryDoubleProperty<Subject>(
    _entities[4].properties[14],
  );

  /// See [Subject.problemFrequency].
  static final problemFrequency = obx.QueryIntegerProperty<Subject>(
    _entities[4].properties[15],
  );

  /// See [Subject.problemGoalMin].
  static final problemGoalMin = obx.QueryIntegerProperty<Subject>(
    _entities[4].properties[16],
  );

  /// See [Subject.problemGoalMax].
  static final problemGoalMax = obx.QueryIntegerProperty<Subject>(
    _entities[4].properties[17],
  );

  /// See [Subject.problemStreak].
  static final problemStreak = obx.QueryIntegerProperty<Subject>(
    _entities[4].properties[18],
  );

  /// See [Subject.problemTimeGoal].
  static final problemTimeGoal = obx.QueryIntegerProperty<Subject>(
    _entities[4].properties[19],
  );

  /// See [Subject.problemRating].
  static final problemRating = obx.QueryIntegerProperty<Subject>(
    _entities[4].properties[20],
  );

  /// See [Subject.lastProcessedProblems].
  static final lastProcessedProblems = obx.QueryDateProperty<Subject>(
    _entities[4].properties[21],
  );

  /// See [Subject.problemRatingConstant].
  static final problemRatingConstant = obx.QueryDoubleProperty<Subject>(
    _entities[4].properties[22],
  );

  /// see [Subject.ranks]
  static final ranks = obx.QueryRelationToMany<Subject, Rank>(
    _entities[4].relations[0],
  );

  /// see [Subject.studySessions]
  static final studySessions = obx.QueryRelationToMany<Subject, StudySession>(
    _entities[4].relations[1],
  );

  /// see [Subject.problemSessions]
  static final problemSessions =
      obx.QueryRelationToMany<Subject, ProblemSession>(
        _entities[4].relations[2],
      );

  /// see [Subject.studyRatingHistory]
  static final studyRatingHistory = obx.QueryRelationToMany<Subject, RatingLog>(
    _entities[4].relations[3],
  );

  /// see [Subject.problemRatingHistory]
  static final problemRatingHistory =
      obx.QueryRelationToMany<Subject, RatingLog>(_entities[4].relations[4]);
}
